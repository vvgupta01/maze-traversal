/**
 * @file maze.h
 * Definition of maze class.
 */

#pragma once

#include <string>
#include <vector>

#include "tile.h"
#include "disjoint-sets.h"
#include "png/Animation.h"
#include "png/PNG.h"

using namespace std;
using namespace png;

/**
 * Rectangular maze randomly generated by an acyclic tree such that the path to any 
 * tile is guaranteed to both exist and be unique.
 * @author Vaibhav Gupta
 */
class Maze {
    public:
        /**
         * Constructor to generate random maze with given dimensions.
         * @param width Width of maze.
         * @param height Height of maze.
         */
        Maze(unsigned width, unsigned height);

        // Destructor to delete maze.
        ~Maze();

        /**
         * Performs a type of Breadth-First Search on the maze to find a solution path.
         * A solution is defined as the path from the tile (0, 0) to any tile in the last
         * row - the number of possible solutions is equal to the width.
         * 
         * The shortest-path is defined as the first solution obtained, while the 
         * longest-path is defined as the last solution obtained. The set-path is defined 
         * as the solution to the farthest tile (width - 1, height - 1). 
         * @param search Vector of tile pointers to store search.
         * @param type Type of BFS to perform (1 = Shortest-Path, 2 = Set-Path, 
         * 3 = Longest-Path)
         * @returns Vector of tile pointers representing solution path.
         */
        vector<Tile*> bfs(vector<Tile*> &search, int type) const;

        /**
         * Performs a type of Depth-First Search on the maze to find a solution path.
         * A solution is defined as the path from the tile (0, 0) to any tile in the last
         * row - the number of possible solutions is equal to the width. 
         * 
         * The shortest-path is defined as the first solution obtained, while the 
         * longest-path is defined as the last solution obtained. The set-path is defined 
         * as the solution to the farthest tile (width - 1, height - 1). 
         * @param search Vector of tile pointers to store search.
         * @param type Type of BFS to perform (1 = Shortest-Path, 2 = Set-Path, 
         * 3 = Longest-Path)
         * @returns Vector of tile pointers representing solution path.
         */
        vector<Tile*> dfs(vector<Tile*> &search, int type) const;

        /**
         * Visualizes BFS/DFS search and solution path through an image 
         * and/or animation.
         * @param search Vector of tile pointers representing search.
         * @param path Vector of tile pointers representing solution path.
         * @param filename Name of file to save image/animation.
         */
        void visualize(const vector<Tile*> &search, vector<Tile*> &path, 
            const string &filename) const;

    private:
        unsigned width, height;
        vector<vector<Tile*>> maze;
        PNG png;

        /**
         * Generates maze by removing border walls and using disjoint sets 
         * to randomly remove walls such that no cycles are created.
         * @returns The number of walls in the maze.
         */
        unsigned generate();

        /**
         * Helper function to return all walls in the maze represented as
         * a vector of tile pointer pairs.
         * @returns Vector of tile pairs representing walls.
         */
        vector<pair<Tile*, Tile*>> generate_walls() const;

        /**
         * Helper function that returns whether or not a pair of coordinates
         * is traversable from a given tile. Assumes coordinates represent an
         * adjacent tile.
         * @param tile Pointer to current tile.
         * @param to_x X-coordinate of the tile attempting to traverse.
         * @param to_y Y-coordinate of the tile attempting to traverse.
         * @returns Boolean representing if coordinates are traversable or not.
         */
        bool can_traverse(Tile *tile, int to_x, int to_y) const;

        // Helper function to draw the maze and store it as a PNG.
        void draw_maze();

        /**
         * Helper function to draw a vector of tiles on the maze.
         * @param png PNG to modify.
         * @param tiles Vector of tile pointers to draw.
         * @param color Pixel representing color to draw tiles with.
         */
        void draw_tiles(PNG &png, const vector<Tile*> &tiles, const HSLAPixel &color) const;

        /**
         * Helper function to animate a vector of tiles on the maze.
         * @param png PNG to modify.
         * @param animation Animation to modify.
         * @param tiles Vector of tile pointers to animate.
         * @param color Pixel representing color to draw tiles with.
         */
        void animate_tiles(PNG &png, Animation &animation, const vector<Tile*> &tiles,
            const HSLAPixel &color) const;
};